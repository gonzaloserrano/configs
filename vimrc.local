" general options {
    " Triger `autoread` when files changes on disk
    " https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
    " https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
    " Notification after file change
    " https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
    autocmd FileChangedShellPost *
      \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

    let g:syntastic_javascript_checkers=['eslint']
    let g:syntastic_javascript_eslint_exe='$(npm bin)/eslint'
    autocmd Filetype javascript setlocal ts=2 sw=2 sts=2 expandtab
    autocmd Filetype javascript.jsx setlocal ts=2 sw=2 sts=2 expandtab

    if executable("rg")
        set grepprg=rg\ --vimgrep\ --no-heading
        set grepformat=%f:%l:%c:%m,%f:%l:%m
    endif
    let g:ackprg = 'rg --vimgrep --no-heading'

    "au FileType clojure nmap ,t :w<CR>:Require!<CR>:Eval (run-all-tests)<CR>
    au FileType clojure nmap <c-t> :w<CR>:Require!<CR>:RunTests<CR>
    au FileType clojure nmap <c-a> :A<CR>

    au FileType tf setl sw=2 sts=2 et

    nnoremap <^[[1;5C> :SidewaysLeft<cr>
    nnoremap <^[[1;5D> :SidewaysRight<cr>

    set nojoinspaces

    let base16colorspace=256  " Access colors present in 256 colorspace
    colorscheme base16-default-dark

    set noshowmode
    " switch visual block to v
    nnoremap v <c-v>

    " i want quicklist to open in new tab or existing one
    set switchbuf+=usetab,newtab
    let g:jsx_ext_required = 0
    "autocmd  FileType  php setlocal omnifunc=phpcomplete_extended#CompletePHP
    imap <ESC>oA <ESC>ki
    set gdefault " don't need to add /g in search/replace
    set nofoldenable " disable code folding
    set nospell " disable spell check
    set undodir=~/.vim/undo
    set virtualedit=block "free block select
    set wrap " don't cut lines
    set nocursorline
    set tabpagemax=40

    let loaded_matchparen=1 " this makes vim epic fast with long lines
    set timeoutlen=250 " lower leader key timeout
    set ttyfast
    "set synmaxcol=320
    set lazyredraw " to avoid scrolling problems

    set t_ts=]2;
    set t_fs=
    set iskeyword-=$
    set iskeyword-=-

    " symfony autocomplete
    let g:spf13_no_autochdir = 1

    " use ag over grep
    if executable('ag')
      set grepprg=ag\ --vimgrep\ $*
      set grepformat=%f:%l:%c:%m
    endif

    " from https://bitbucket.org/sjl/dotfiles/src/1b6ffba66e9f/vim/.vimrc {
        " Sudo to write
        cmap w!! w !sudo tee % >/dev/null
    " }
"}

" plugin options {
    " airline {
        " use lightline
        UnBundle 'bling/vim-airline'
        let g:airline_section_z = '%t'
        let g:airline#extensions#tabline#fnamemod = ':t'
    " }
    " enabled groups is in .before file
    " Vundle {
        UnBundle 'easymotion/vim-easymotion'
        UnBundle 'spf13/vim-autoclose'
        UnBundle 'gorodinskiy/vim-coloresque'
        UnBundle 'spf13/PIV'
        " use my fork
        UnBundle 'tpope/vim-markdown'
        "UnBundle 'jiangmiao/auto-pairs'
        UnBundle 'gcmt/wildfire.vim'
        UnBundle 'rhysd/conflict-marker.vim'
    " }
    " autopairs {
        let g:AutoPairsOnlyWhitespace=1
    " }

    " interestingwords {
        nnoremap <silent> <leader>, :call InterestingWords('n')<cr>
        nnoremap <silent> <leader>. :call UncolorAllWords()<cr>
        let g:interestingWordsTermColors = ['121', '215', '159', '211', '222', '154', '137', '126']
    " }

    let g:php_cs_fixer_path = get(g:, 'php_cs_fixer_path', '~/bin/php-cs-fixer')

    " incsearch {
        " map /  <Plug>(incsearch-forward)
        " map ?  <Plug>(incsearch-backward)
        " map g/ <Plug>(incsearch-stay)
    "}

    " Syntastic {
        " play with angularJS
        let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
        let g:syntastic_html_tidy_ignore_errors=["<ion-", "discarding unexpected </ion-"]
        " https://www.reddit.com/r/vim/comments/3opdrd/dont_autoclose_location_list_when_leaving_window/
        "let g:syntastic_auto_loc_list = 0
    " }

    " tagbar {
        "let g:tagbar_left = 0
        let g:tagbar_autofocus = 0
        let g:tagbar_compact = 2
        "let g:tagbar_width = 30
        let g:tagbar_type_php  = { 'ctagstype' : 'php', 'kinds' : [ 'i:interfaces', 'c:classes', 'd:constant definitions', 'f:functions', 'j:javascript functions:1' ] }
        map <c-l> :TagbarToggle<CR>
        let g:tagbar_phpctags_bin='~/bin/phpctags'
        let g:tagbar_phpctags_memory_limit = '512M'
        "autocmd VimEnter * nested :call tagbar#autoopen(1)
        "autocmd BufEnter * nested :call tagbar#autoopen(0)
    "}

    " mark {
        hi MarkWord1  ctermbg=Red      ctermfg=Black  guibg=#FF7272    guifg=Black
        hi MarkWord2  ctermbg=Blue     ctermfg=Black  guibg=#9999FF    guifg=Black
        hi MarkWord3  ctermbg=Magenta  ctermfg=Black  guibg=#FFB3FF    guifg=Black
        hi MarkWord4  ctermbg=Green    ctermfg=Black  guibg=#A4E57E    guifg=Black
        hi MarkWord5  ctermbg=Cyan     ctermfg=Black  guibg=#8CCBEA    guifg=Black
        hi MarkWord6  ctermbg=Yellow   ctermfg=Black  guibg=#FFDB72    guifg=Black
    " }

    " PHP folder {
        let b:phpfold_use = 1 " Fold groups of use statements in the global scope.
        let b:phpfold_group_iftry = 0 " Fold if/elseif/else and try/catch/finally blocks as a group, rather than each part separate.
        let b:phpfold_group_args = 1 " Group function arguments split across multiple lines into their own fold.
        let b:phpfold_group_case = 1 " Fold case and default blocks inside switches.
        let b:phpfold_heredocs = 1 " Fold HEREDOCs and NOWDOCs.
        let b:phpfold_docblocks = 1 " Fold DocBlocks.
        let b:phpfold_doc_with_funcs = 1 " Fold DocBlocks. Overrides b:phpfold_docblocks.
        let b:phpfold_text = 1 " Enable the custom foldtext option.
    "}

    "others {
        let g:DisableAutoPHPFolding=1 " disable PIV's folding
        let g:indent_guides_enable_on_vim_startup = 0
    "}

    " golang {
        " govim
        "au FileType go nmap <c-@> : <C-u>call GOVIMHover()<CR>

        " vim-go
        " gopls and autocompletion
        let g:go_def_mode = "gopls"
        let g:go_referrers_mode="guru"
        let g:go_guru_scope = ["github.com/PaackEng/delivery-system/..."]
        let g:go_fmt_experimental = 1
        let g:go_gorename_command = 'gopls' " instead of gorename
        let g:go_build_tags='infra sql amqp'
		let g:go_highlight_diagnostic_errors=0
		let g:go_highlight_diagnostic_warnings=0 

        set statusline+=%#goStatuslineColor#
        set statusline+=%{go#statusline#Show()}
        set statusline+=%*

        let g:go_list_type = "quickfix"
        let g:go_fmt_command = "gofumports"
        let g:go_fmt_fail_silently = 1
        let g:go_fmt_autosave = 1
        let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

        let g:go_highlight_variable_declarations = 1
        let g:go_highlight_build_constraints = 1
        let g:go_highlight_functions = 1
        let g:go_highlight_function_calls = 1
        let g:go_highlight_methods = 1
        let g:go_highlight_operators = 1
        let g:go_highlight_types = 1
        let g:go_highlight_fields = 1
        let g:go_highlight_extra_types = 1
        let g:go_highlight_generate_tags = 1
        let g:go_term_enabled = 1

        au FileType go nmap <c-]> <Plug>(go-def)
        autocmd FileType go map <c-e> :GoIfErr<CR>
        autocmd FileType go nmap <leader>e <plug>NERDTreeTabsToggle<CR>
        autocmd FileType go nmap <c-a> :GoAlternate!<CR>
        " c-@ === c-space :-O
        au FileType go nmap <c-@> :GoInfo<CR>
        au FileType go nmap <c-i> :GoCoverageToggle<CR>
        autocmd FileType go map <c-b> <esc>:w<CR>:GoTestCompile<CR>
        autocmd FileType go map <c-s> <esc>:w<CR>:GoTestCompile<CR>

        autocmd FileType go set noexpandtab
        autocmd FileType go set nolist

        " abbreviations {
            iab ee err := 
            iab ass assert := assert.New(t)
            iab asse assert.NoError(err)
            iab assec assert.NoError(cmd.Error)
            iab assq assert.Equal(
            iab asst assert.True(
            iab trun t.Run(fmt.Sprintf("%d", i), func(t * testing.T) {<CR>t.Parallel()
            iab ppr packagesRepository
            iab mmr movementsRepository
            iab rrr roundsRepository
            iab ddr driversRepository
            iab wwr warehousemanagersRepository
        "}

        " godoctor; Refactor extract foo
        if exists("g:did_load_filetypes")
            filetype off
            filetype plugin indent off
        endif
        set rtp+=~/.vim/bundle/godoctor.vim
        filetype plugin indent on
        syntax on
    " }


    " I'm using supertab for completion.
    " Use context-dependent completion type.
    " This mean it'll try each function from g:SuperTabCompletionContexts and
    " if no one return anything then use g:SuperTabContextDefaultCompletionType:
    " 1. s:ContextText will handle pathname completions anywhere.
    " 2. s:ContextText will handle module/class/object member completions
    "    outside of String/Comment (using &completefunc or &omnifunc, if any).
    " 3. ContextPlainText will handle String/Comment using default completion.
    " 4. s:ContextDiscover will handle everything using &completefunc, if any.
    " 5. Use default.
    let g:SuperTabDefaultCompletionType = 'context'
    let g:SuperTabCompletionContexts = ['s:ContextText', 'ContextPlainText', 's:ContextDiscover']
    let g:SuperTabContextDiscoverDiscovery = ['&completefunc:<c-x><c-u>']
    let g:SuperTabContextDefaultCompletionType = '<c-p>'
    function! ContextPlainText()
        let synname = synIDattr(synID(line('.'), col('.') - 1, 1), 'name')
        if synname =~ '\(String\|Comment\)'
            exec 'let complType = "' . escape(g:SuperTabContextDefaultCompletionType, '<') . '"'
            return complType
        endif
    endfunction
    " Set &completefunc to try &omnifunc or default one if omni fails.
    autocmd FileType *
                \ if &omnifunc != '' |
                \   call SuperTabChain(&omnifunc, g:SuperTabContextDefaultCompletionType) |
                \ else |
                \   let b:SuperTabCompletionContexts = ['s:ContextText'] |
                \ endif

    "autocompletion
    "let g:SuperTabDefaultCompletionType = "context"
    "let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
    "inoremap <tab> <c-r>=Smart_TabComplete()<CR>
    "function! Smart_TabComplete()
        "let line = getline('.')                         " current line

        "let substr = strpart(line, -1, col('.')+1)      " from the start of the current
        "" line to one character right
        "" of the cursor
        "let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
        "if (strlen(substr)==0)                          " nothing to match on empty string
            "return "\<tab>"
        "endif
        "let has_period = match(substr, '\.') != -1      " position of period, if any
        "let has_slash = match(substr, '\/') != -1       " position of slash, if any
        "if (!has_period && !has_slash)
            "return "\<C-X>\<C-P>"                         " existing text matching
        "elseif ( has_slash )
            "return "\<C-X>\<C-F>"                         " file matching
        "else
            "return "\<C-X>\<C-O>"                         " plugin matching
        "endif
    "endfunction

    " youcompleteme + ultisnips {
        "let g:loaded_youcompleteme = 1 " disable
        "let g:ycm_server_python_interpreter = "/usr/bin/python"
        "let g:go_snippet_engine = "neosnippet"
        "let g:ycm_min_num_of_chars_for_completion = 3
        "autocmd FileType html let g:ycm_min_num_of_chars_for_completion = 1
        ""let g:ycm_auto_trigger = 0
        let g:UltiSnipsExpandTrigger = "<C-k>"
        let g:UltiSnipsJumpForwardTrigger = "<C-k>"
        let g:UltiSnipsJumpBackwardTrigger = "<C-j>"
    "}
    "
    " lightline {
        let g:lightline = {
          \ 'active': {
          \   'left': [ [ 'mode', 'paste'],
          \             [ 'fugitive', 'filename', 'modified'],
          \             [ 'go'] ],
          \   'right': [ [ 'lineinfo' ], 
          \              [ 'percent' ], 
          \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
          \ },
          \ 'inactive': {
          \   'left': [ [ 'go'] ],
          \ },
          \ 'component_function': {
          \   'lineinfo': 'LightLineInfo',
          \   'percent': 'LightLinePercent',
          \   'modified': 'LightLineModified',
          \   'filename': 'LightLineFilename',
          \   'go': 'LightLineGo',
          \   'fileformat': 'LightLineFileformat',
          \   'filetype': 'LightLineFiletype',
          \   'fileencoding': 'LightLineFileencoding',
          \   'mode': 'LightLineMode',
          \   'fugitive': 'LightLineFugitive',
          \ },
          \ }

        function! LightLineModified()
          if &filetype == "help"
            return ""
          elseif &modified
            return "+"
          elseif &modifiable
            return ""
          else
            return ""
          endif
        endfunction

        function! LightLineFileformat()
          return winwidth(0) > 70 ? &fileformat : ''
        endfunction

        function! LightLineFiletype()
          return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
        endfunction

        function! LightLineFileencoding()
          return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
        endfunction

        function! LightLineInfo()
          return winwidth(0) > 60 ? printf("%3d:%-2d", line('.'), col('.')) : ''
        endfunction

        function! LightLinePercent()
          return &ft =~? 'vimfiler' ? '' : (100 * line('.') / line('$')) . '%'
        endfunction

        function! LightLineFugitive()
          return exists('*fugitive#head') ? fugitive#head() : ''
        endfunction

        function! LightLineGo()
          " return ''
          return exists('*go#jobcontrol#Statusline') ? go#jobcontrol#Statusline() : ''
        endfunction

        function! LightLineMode()
          let fname = expand('%:t')
          return &ft == 'vimfiler' ? 'VimFiler' :
                \ winwidth(0) > 60 ? lightline#mode() : ''
        endfunction

        function! LightLineFilename()
          let fname = expand('%:t')
          if mode() == 't'
            return ''
          endif

          return &ft == 'vimfiler' ? vimfiler#get_status_string() :
                \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                \ ('' != fname ? fname : '[No Name]')
        endfunction

        function! LightLineReadonly()
          return &ft !~? 'help' && &readonly ? 'RO' : ''
        endfunction

        " Trigger a highlight in the appropriate direction when pressing these keys:
        let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
    "}
"}

" abbreviations {
    " erlang {
        iab iof io:format("~n~p~n", []),
        iab ioff io:format("~n------~n~p~n------~n", []),
        iab iofff io:format("~n------~n~p~n~p~n------~n", []),
        iab ioffff io:format("~n------~n~p~n~p~n~p~n------~n", []),
    "}

    " php {
        iab errl error_log(date('Y-m-d H:i:s') . " " . "\n", 3, '/tmp/my_error.log');
        iab ymd date('Y-m-d H:i:s',
    "}

    " others {
        ab brr . "<br/>"
    "}

    " elm {
        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_auto_loc_list = 1
        let g:elm_syntastic_show_warnings = 1
        let g:ycm_semantic_triggers = {
            \ 'elm' : ['.'],
        \}

        "let g:elm_jump_to_error = 0
        "let g:elm_make_output_file = "elm.js"
        let g:elm_make_show_warnings = 0
        let g:elm_syntastic_show_warnings = 0
        "let g:elm_browser_command = ""
        "let g:elm_detailed_complete = 0
        let g:elm_format_autosave = 1
        "let g:elm_format_fail_silently = 0
        "let g:elm_setup_keybindings = 1
    " }

    " c# {
        let g:syntastic_cs_checkers = ['syntax', 'semantic', 'issues']
        augroup omnisharp_commands
            autocmd!

            "Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)
            autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

            " Synchronous build (blocks Vim)
            "autocmd FileType cs nnoremap <F5> :wa!<cr>:OmniSharpBuild<cr>
            " Builds can also run asynchronously with vim-dispatch installed
            autocmd FileType cs nnoremap <leader>b :wa!<cr>:OmniSharpBuildAsync<cr>
            " automatic syntax check on events (TextChanged requires Vim 7.4)
            autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck

            " Automatically add new cs files to the nearest project on save
            autocmd BufWritePost *.cs call OmniSharp#AddToProject()

            "show type information automatically when the cursor stops moving
            autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

            "The following commands are contextual, based on the current cursor position.

            autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition<cr>
            autocmd FileType cs nnoremap <leader>fi :OmniSharpFindImplementations<cr>
            autocmd FileType cs nnoremap <leader>ft :OmniSharpFindType<cr>
            autocmd FileType cs nnoremap <leader>fs :OmniSharpFindSymbol<cr>
            autocmd FileType cs nnoremap <leader>fu :OmniSharpFindUsages<cr>
            "finds members in the current buffer
            autocmd FileType cs nnoremap <leader>fm :OmniSharpFindMembers<cr>
            " cursor can be anywhere on the line containing an issue
            autocmd FileType cs nnoremap <leader>x  :OmniSharpFixIssue<cr>
            autocmd FileType cs nnoremap <leader>fx :OmniSharpFixUsings<cr>
            autocmd FileType cs nnoremap <leader>tt :OmniSharpTypeLookup<cr>
            autocmd FileType cs nnoremap <leader>dc :OmniSharpDocumentation<cr>
            "navigate up by method/property/field
            autocmd FileType cs nnoremap <C-K> :OmniSharpNavigateUp<cr>
            "navigate down by method/property/field
            autocmd FileType cs nnoremap <C-J> :OmniSharpNavigateDown<cr>
        augroup END

        autocmd FileType cs nnoremap <leader><space> :OmniSharpGetCodeActions<cr>
        "
        " Force OmniSharp to reload the solution. Useful when switching branches etc.
        autocmd FileType cs nnoremap <leader>rl :OmniSharpReloadSolution<cr>
        autocmd FileType cs nnoremap <leader>cf :OmniSharpCodeFormat<cr>
        " Load the current .cs file to the nearest project
        autocmd FileType cs nnoremap <leader>tp :OmniSharpAddToProject<cr>

        " Add syntax highlighting for types and interfaces
        autocmd FileType cs nnoremap <leader>th :OmniSharpHighlightTypes<cr>
        let g:OmniSharp_want_snippet=1
    " }
"}

" mappings {
    " custom {
        " tab movement {
            nmap <C-j> :tabprevious<CR>
            nmap <C-k> :tabnext<CR>
        "}

        " git diff {
            if has('nvim')
                map <c-d> :vsplit %<bar>te diffwrapper %:p<cr>
                map <c-h> :vsplit %<bar>te git lp %<cr>
            else
                map <c-d> :!diffwrapper %:p<cr>
                map <c-y> :!GIT_PAGER='opendiff' git diff %<cr>
                map <c-h> :!git lp %<cr>
            endif
        "}

        " tag jumping {
            nnoremap <c-]> g<c-]>
            vnoremap <c-]> g<c-]>
            nnoremap g<c-]> <c-]>
            vnoremap g<c-]> <c-]>
            nnoremap t g<c-]>
            vnoremap t g<c-]>
        "}
        " keep blocks selected when indenting {
            vnoremap < <gv
            vnoremap > >gv
        "}
    "}

    " general {
        " convert encrypted save :X in plain save :x
        cnoremap <expr> X (getcmdtype() is# ':' && empty(getcmdline())) ? 'x' : 'X'

        " make c-c behave like esc
        inoremap <silent> <c-c> <esc>

        " stop from entering ex mode on accident
        nnoremap Q <nop>

        " simulate emacs' transpose feature
        nnoremap <Leader><Leader>l /\<<CR>yiw?\<<CR>viwp/\<<CR>viwp:noh<CR>
        nnoremap <Leader><Leader>h ?\w\><CR>yiw/\<<CR>viwp?\w\><CR>viwp:noh<CR>a

        " copy current line sans leading/trailing whitespace
        nnoremap gy m`^yg_``"

        " next/previous word under cursor in same column
        nnoremap g* yiw/^.*\%<C-r>=col('.')<CR>c\zs<C-r>"<CR>
        nnoremap g# yiw?^.*\%<C-r>=col('.')<CR>c\zs<C-r>"<CR>" * and # without moving the cursor

        " searches will center on the line it's found in.
        map N Nzz
        map n nzz

        " fill current line with previus line word by word
        imap <expr> <c-u> matchstr(getline(line('.')-1), '\%' . virtcol('.') . 'v\%(\k\+\s\=\\|.\)')

        " make BS/DEL work as expected in visual modes
        vmap <BS> x

        " delete in normal mode to switch off highlighting till next search and clear messages
        nmap <silent> <BS> :nohlsearch<CR>
    "}

    " plugins {
        vnoremap <c-d> :call PhpDocRange()<CR>
        vnoremap <c-a> :EasyAlign<Enter>

        " ctrlp
        nmap <c-f> :CtrlPMRU<CR>
        "nmap <c-t> :CtrlPBuffer<CR>
        nmap <c-v> :CtrlPBufTag<CR>
        nmap <c-g> :CtrlPModified<CR>
        "map <c-g> :CtrlPFunky<CR>
        "let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
        "let g:ctrlp_match_func = {'match': 'cpsm#CtrlPMatch'}
        let g:ctrlp_funky_matchtype = 'path'
        let g:ctrlp_funky_syntax_highlight = 1
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc\|\.json$' }
        let g:ctrlp_root_markers = ['.ctrlp_sp', '.ctrlp_sp_go']
        let g:ctrlp_user_command = {
          \ 'types': {
            \ 5: ['.ctrlp_sp_go_bsk', 'cd %s && find . ../bsk -type f -not -path "*/.git/*" -not -path "*/vendor/*" -not -path "*/Godeps/*" -not -path "*/components/*" -not -path "*/node_modules/*" -not -path "*/.terraform/*" -not -path "*/third_party/*"'],
            \ 7: ['.git/', 'cd %s && git ls-files . -co --exclude-standard'],
          \ }
        \ }

        let g:ctrlp_buftag_types = {'go' : '--language-force=go --golang-types=ft'}

        " marks
        "nmap <c-m> <Plug>MarkSet
        "nmap <c-x> <Plug>MarkClear </Plug></leader></silent></unique>

        " expand region
        "vmap v <Plug>(expand_region_expand)
        "vmap <C-v> <Plug>(expand_region_shrink)

        " php cs fixer"
        let g:php_cs_fixer_path = "~/bin/php-cs-fixer.phar" " define the path to the php-cs-fixer.phar
        let g:php_cs_fixer_level = "psr0"                   " which level ?
        let g:php_cs_fixer_config = "sf23"                  " configuration
        " If you want to define specific fixers:
        let g:php_cs_fixer_fixers_list = "phpdoc_params"
        let g:php_cs_fixer_enable_default_mapping = 1     " Enable the mapping by default (<leader>pcd)
        let g:php_cs_fixer_dry_run = 1                    " Call command with dry-run option
        let g:php_cs_fixer_verbose = 1                    " Return the output of command if 1, else an inline information.

        " git heatmap
        let g:smeargle_colouring_scheme = ''
    "}
    " netdtree {
        " open if no files specified
        "autocmd StdinReadPre * let s:std_in=1
        "autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
        " dont quit when opening file
        let NERDTreeQuitOnOpen=0
    "}
    " rainbow {
        "let g:rbpt_colorpairs = [
            "\ [158, '#00ceb3'],
            "\ [081, '#00a3ff'],
            "\ [214, '#ff8d00'],
            "\ [123, '#3fffc9'],
            "\ [045, '#29b9ec'],
            "\ [190, '#bfec29'],
            "\ [208, '#ffad00'],
            "\ [117, '#48bde0'],
            "\ ]

        "let g:rbpt_max = 8
        "let g:rbpt_loadcmd_toggle = 0

        "au VimEnter * RainbowParenthesesToggle
        "au Syntax * RainbowParenthesesLoadRound
        "au Syntax php,c,cpp,go,h,java,python,javascript,scala,coffee RainbowParenthesesLoadSquare
        "au Syntax php,c,cpp,go,h,java,python,javascript,scala,coffee,scss  RainbowParenthesesLoadBraces

        let g:rainbow_active = 1
        let g:rainbow_conf = {
                    \   'guifgs': ['#f92672', '#a6e22e', '#f4bf75', '#66d9ef', '#ae81ff', '#a1efe4'],
                    \   'ctermfgs': 'xterm-256color' == $TERM || 'screen-256color' == $TERM ? ['1', '2', '3', '4', '5', '6', '7'] : ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta'],
                    \   'operators': '_,_',
                    \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
                    \   'separately': {
                    \       '*': {},
                    \       'tex': {
                    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
                    \       },
                    \       'vim': {
                    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
                    \       },
                    \       'html': {
                    \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
                    \       },
                    \       'css': 0,
                    \   }
                    \}
        "}
"}

" from instanly better vim {
    " highlight column 121 (too long line)
    highlight ColorColumn ctermbg=magenta
    call matchadd('ColorColumn', '\%121v', 100)
" }

" Next and Last {
    " from https://bitbucket.org/sjl/dotfiles/src/1b6ffba66e9f/vim/.vimrc#cl-1023
    " Motion for "next/last object". For example, "din(" would go to the next "()" pair
    " and delete its contents.

    onoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
    xnoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
    onoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
    xnoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>

    onoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
    xnoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
    onoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
    xnoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>

    function! s:NextTextObject(motion, dir)
      let c = nr2char(getchar())

      if c ==# "b"
          let c = "("
      elseif c ==# "B"
          let c = "{"
      elseif c ==# "d"
          let c = "["
      endif

      exe "normal! ".a:dir.c."v".a:motion.c
    endfunction
" }

" Handle URL {
        " OSX only: Open a web-browser with the URL in the current line
        function! HandleURI()
            let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
            echo s:uri
            if s:uri != ""
                exec "!open \"" . s:uri . "\""
            else
                echo "No URI found in line."
            endif
        endfunction
        map <leader>u :call HandleURI()<CR>
" }

" Put at the very end of your .vimrc file.
"let php_var_selector_is_identifier = 0
function! PhpSyntaxOverride()
  "hi! def link phpDocTags  phpDefine
  "hi! def link phpDocParam phpType
  "hi! phpFunctions guifg=#5f0000 guibg=NONE gui=NONE
  "hi! phpVarSelector guifg=#e57373 guibg=NONE gui=NONE
  "hi! phpMemberSelector guifg=136 guibg=NONE gui=NONE
  "hi! phpIdentifier guifg=#4fc3f7 guibg=NONE gui=NONE
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END

map <leader>col :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
"hi! link Error VisualNOS

nmap <leader>sp :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
